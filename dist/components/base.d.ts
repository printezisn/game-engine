import type { Container } from 'pixi.js';
import type { BaseProps, DisplayObject, Point } from './types';
import type ContainerComponent from './container';
import { type AnimationOptions } from '../animation';
declare abstract class BaseComponent<T extends Container> implements DisplayObject {
    private _props;
    private _object;
    private _parent;
    private _bindings;
    private _animations;
    constructor(object: T, props: BaseProps);
    protected registerToSignal(name: string, callback: (...args: any[]) => void): void;
    protected unregisterFromSignal(name: string): void;
    get props(): BaseProps;
    get object(): T;
    get x(): number;
    set x(x: number);
    get y(): number;
    set y(y: number);
    get position(): Point;
    set position(position: Point);
    get globalPosition(): Point;
    set scale(scale: Point);
    get scale(): Point;
    get scaleX(): number;
    set scaleX(x: number);
    get scaleY(): number;
    set scaleY(y: number);
    get width(): number;
    set width(width: number);
    get height(): number;
    set height(height: number);
    get alpha(): number;
    set alpha(alpha: number);
    get visible(): boolean;
    set visible(visible: boolean);
    get label(): string;
    get parent(): ContainerComponent | null;
    set parent(container: ContainerComponent | null);
    get interactive(): boolean;
    set interactive(interactive: boolean);
    get rotation(): number;
    set rotation(rotation: number);
    get tint(): number;
    set tint(tint: number);
    animate(options: AnimationOptions): Promise<void>;
    stopAnimations(): void;
    delay(duration: number): Promise<void>;
    destroy(): void;
    positionToScreen(): void;
    private _createAnimation;
}
export default BaseComponent;
